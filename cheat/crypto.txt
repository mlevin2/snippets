[公開鍵暗号]
 - PKCS: Public Key Cryptography Standards

[RSA]
 - Ron Rivest, Adi Shamir, Len Adelmanが1978年に考案
 - RSA Data Security社からPKCS#1として公開
   - PKCS#1 v1.0: 初期の標準だが脆弱性が知られている
   - PKCS#1 v1.5(RFC2313): 脆弱性に対応済でSSLではこれしか使えない
   - PKCS#1 v2.0(RFC2437): MD4禁止など変更はあるがv1.5と互換
   - PCKS#1 v2.1(RFC3447): 機能追加されたがv2.0と互換
 - 鍵配送アルゴリズムとして使える
 - 公開鍵: (n,e)という整数ペア
   - n: 2つの大きな素数p,qの積でModulus(法)という
   - e: PKE - Public Key Exponent(公開指数)という
   - RSAの安全性はnをp*qに因数分解することの困難さに依存
   - nのbit数をRSAの鍵長という
   - eと(p-1)(q-1)は互いに素
   - eは通常3,17,65537の中から選ばれる
 - 秘密鍵: d = e^(-1) mod(p-1)(q-1)
 - 暗号/復号化: C = M^e mod(n), M = C^d mod(n)
 - 現実の実装では暗号化対象のbyte列を数値に変換する必要がある
 - byte列のbit数が鍵長に満たない場合paddingしないと危険
 - paddingの方法はPKCS#1のバージョンごとに微妙に違う
 - 暗号化とデジタル署名では用途の要件からpaddingの方法が違う
   - 暗号化は毎回別のpaddingを出来た方が安全性が高まる
   - デジタル署名は毎回同じpaddingにならないと困る

[DH]
 - Whitfield Diffie, Martin Hellmanが1976年に考案
 - 鍵合意アルゴリズムとして使える
 - 大きな素数pと生成元g<pを選ぶ
   - ただしすべてのZ<pについてg^W mod(p)=ZとなるWが存在すること
 - 乱数X<pを秘密鍵とする
 - Y=g^X mod(p)を公開鍵とする
 - 送受信者はそれぞれ自分の鍵ペアを生成して公開鍵を交換する
 - 自分の秘密鍵をX_s(elf)相手の公開鍵をY_o(ther)とする
 - ZZ=X_s^Y_o mod(p)を計算してそれを共通鍵として合意する
 - p,g,Y_s,Y_oからZZを計算することはできないと信じられている
   - しかしできないと証明されたわけではない
 - ここでYからXを求める問題を離散対数問題という

[DSS]
 - DSS: Digital Signature Standard
 - DSA: Digital Signature Algorithmとも言う
 - NISTが1991年に提案
 - DSAは標準化前DSSは標準化後の名前
 - 狙いは署名に使えて暗号化には使えない手順の確立
 - 署名検証者は署名者のDigestを復元しないまま検証結果だけを得る
 - RSAとDSSは外形がかなり異なるため移行に当たって混乱もあった
 - 数学的にはDHと同じ部類
 - 組み合わせるDigestアルゴリズムはSHA-1しか使えない
   - 厳密には160bit Digest関数なら良いが該当するのはSHA-1だけ

[Block Cipher]
 - データ量がブロック長に満たないとPaddingする
 - EBC: Electronic CodeBook
   - 平文と暗号文が必ず1:1対応するので攻撃されやすい
 - CBC: Cipher Block Chaining
   - CBC Rollover: Block x bitなら暗号化していいのは2^(x/2) Block
   - C1[i]=C2[i]かつM1[i+1]=M2[i+1]ならC1[i+1]=C2[i+1]1が予測可能
 - OFB: Output FeedBack
 - CFB: Cipher FeedBack

[DES]
 - 64bit Block Size
 - 56bit Key Size + 8bit Parity
 - 2DESは2^56 blockのメモリがあればDESと同程度の強度となる
 - 3DESは192bit分の鍵長で112bit相当の強度を得る非効率な方式
 - 3DESはDESの3倍の計算時間を食う

[Digest]
 - MD5: MD4の強化版で2^64回の操作でCollisionが見つかる
 - SHA-1: MD4の強化版で2^80回の操作でCollisionが見つかる
 - 誕生日のパラドックス: 23人いれば同一誕生日のペアが1組は出来る

[MAC]
 - Message Authentication Code
 - 共通鍵暗号系の改竄検知
 - 暗号化の仕組みだけではたとえ暗号文を復号出来てもそれが改竄されて
   いないという証拠にはならない

[Security Model]
 - 機密性(confidentiality)が必要だから共通鍵で暗号化
 - 暗号化だけでは通信路の途中でデータを差し替えられても検知できない
   ので同じ共通鍵でMACを付与して改竄検知
 - 以上では共通鍵が最初から存在すると仮定しているがこれは非現実的
 - 共通鍵を配布するシステムとして公開鍵暗号系を使用
 - しかし公開された鍵が本物であることを証明する術が無い
 - 公開鍵の真正性(authenticity)を証明するためにPKIを使用
 - 公開鍵暗号系の代わりに中央集権の共通鍵管理サーバを使う方式もある
   - その実例がKerberos

[Key Management]
 - Kerberos
   - 通信開始時の共通鍵生成のため鍵管理サーバは常時オンライン
   - 鍵管理サーバは通信に使用する共通鍵を知っており盗聴可能
 - PKI CA
   - 証明書発行後はCA自身がオフラインであっても通信可能
   - CAは通信当事者の秘密鍵を知らないので盗聴不可能

[CRL]
 - Certification Revocation List
 - CAが発行する
 - CAが無効を宣言した証明書の一覧とそれ自体への署名から成る
 - CRLは定期的に発行される
 - 証明書が実質無効になってから次のCRLが出るまでのタイムラグが危険
 - オンラインのCRL確認プロトコルであるOCSPでタイムラグを軽減できる
 - OCSPを使うにはCAは常時オンラインでなければならない
 - OCSPの処理はCAにも証明書ユーザにも高負荷

[米国輸出規制]
 - NSA: National Security Agency (国家安全保障局)
 - NSAには米国政府の通信の秘密を維持しながら他者を盗聴する義務がある
 - 原則として認証用暗号技術は輸出許可・暗号化用技術は輸出規制
 - 共通鍵/公開鍵暗号系の鍵長はそれぞれ40/512bitまでだった
 - 上記基準を満たしても輸出を認められない輸出禁止国もあった
   - キューバ・イラン・イラク・リビア・北朝鮮・シリア・スーダン
 - RC2/RC4は特別扱いされていて輸出審査が緩かった
   - NSAで解読技術を十分研究していたと噂されている
   - 多くの暗号技術仕様にRC2/RC4が含まれるのはこのため
 - 金融システムは例外として強い暗号技術を使っても良かった
 - 1998年9月規制緩和: 鍵長が56/1024bitまでとなった
 - 2000年1月規制緩和: Open Source技術は規制から外れた
 - 規制の名残で多くのセキュリティ技術がWeakモード動作を含む

