 - ITUによるOSI計画の一環
 - OSIプロトコル群の仕様記述言語
 - X.680及びX.690番台
 - 構造定義とEncode規則が分離されている
 - 複数のEncode規則がある
   - BER: Basic Encoding Rule
   - CER: Canonical Encoding Rule
   - DER: Distinguished Encoding Rule
   - XER: XML Encoding Rule
 - BERはEncode結果が一意ではないが処理効率は良い
 - DERは同じ構造は必ず同じ結果にEncodeされる
 - DERとCERはBERに制約を課したサブセット
 - 電子署名の元データなどはDERで一意に表現するのが望ましい
 - 仕様から各言語の構造体とEncoder/Decoderを自動生成可能
 - いずれのEncodeもTLV(tag,length,value)から成る
 - ASN.1にはMACRO機能があった
   - 最新版の規格では取り除かれた
   - SNMP/MIBのSMIはMACROで定義されている
 - ASN.1はAssignmentのリストを記述する
 - Assignmentの種別
   - Type Assignment
   - Value Assignment
   - ObjectClass Assignment

[Definition]
 - ASN.1 Specification: 1つまたは複数のASN.1 Module
 - ASN.1 Module: Type, Valueなどの定義の集合
 - Type: 名前付きのValueの集合
 - Type Reference Name: あるコンテキストでのみ有効なTypeの名前
 - Subtype: 親Typeの部分集合を取り出して定義したType
 - Tag: 主にプログラムによる読み書き比較を意図したTypeの識別名
   - Tag Classと非負整数のペアから成る
   - ValueをEncodeする時は人間可読なType名ではなくTagが対象となる
 - Tag Class: Tagの有効範囲を示す種別
   - Universal, Application, Private, Context-Specificの4種類
   - Universal TagはITU-Tだけが定義してよい
 - Tagged Type: 既存のTypeを流用してTagだけを置換した新規Type
   - 例えば"[0] IMPLICIT INTEGER"などはTagged Type
 - Tagging: あるTypeのTagを置換する行為
 - Implicit Tag: Tagged TypeのEncode時に元のType情報を保持しないTag
   - 利点: Encode後のデータサイズが小さくなる
 - Explicit Tag: Tagged TypeのEncode時に元のType情報を保持するTag
   - 利点: 新Typeの知識が無くてもDecodeできる
 - Default Tag: すべてのASN.1 Typeに割り当てられた既定のTag
 - Extension Marker: 将来拡張する予定のポイントを示すマーク
   - このマークをEllipsisと言い構文上は"..."で表す
   - "..."が1つだけの場合はそのポイント以降を拡張する可能性がある
   - "..."が2つの場合はその間を拡張する可能性がある
 - Object: 通信路上で送受信する必要がある様々な名前つき情報のこと
 - OID: Objectを識別するための一意なID

[Syntax]
 - typereferenceは先頭を英大文字とする英数文字列
 - identifier先頭を英小文字とする英数文字列
 - valuereferenceはidentifierと同じ構文
 - commentは"--"から次の"--"または行末まで
 - ビット列は以下のいずれか
   - bstring: '001101010001110'B
   - hstring: '3892FA4B22CA23D'H
 - NamedTypeは"var-name INTEGER, ok BOOLEAN"のように書く
   - SEQUENCE/SET/CHOICE定義に登場する
 - NamedValueはNamedTypeに対応して"var-name 100, ok TRUE"のように書く
   - この形式を見かけることはまず無い
 - NamedNumberは"a(1), b(2)"のように書く

[Assignment例]
 - Type Assignment (Certificateという型の定義)
 - typedefのようなもの

Certificate ::= SEQUENCE  {
    -- 識別子            型
    tbsCertificate       TBSCertificate,
    signatureAlgorithm   AlgorithmIdentifier,
    signatureValue       BIT STRING  }

 - Value Assignment (id-pkixという値の定義)

id-pkix OBJECT IDENTIFIER ::=
    { iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) }

