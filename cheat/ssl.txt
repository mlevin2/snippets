[Normal SSL Sequence]
ClientHello             ----->    
                                           ServerHello
                                           Certificate
                                     ServerKeyExchange
                                    CertificateRequest
                        <-----         ServerHelloDone
Certificate
ClientKeyExchange
CertificateVerify
ChangeCipherSpec
Finished                ----->    
                                      ChangeCipherSpec
                        <-----                Finished
Application Data        <---->        Application Data


[SSL Session Resume Sequence]
ClientHello(Session ID) ----->
                               ServerHello(Session ID)
                                      ChangeCipherSpec
                        <-----                Finished
ChangeCipherSpec
Finished                ----->
Application Data        <---->        Application Data


[Basic Syntax]
 - ASN.1やXDRに似ているがまったく別物の独自フォーマット
 - typedef構文: ExistingType NewType;
 - 数値はすべて最上位byteが先頭に来るByteStream
 - ただしAlignmentの制約が無いのでBigEndianとは違う
 - 固定長数値型: uint8/16/24/32/64
 - 固定長列挙型: enum { foo(1), bar(2), baz(3) } TypeName;
   - 列挙型は取り得る最大値で暗黙に固定データ長が決まる
   - データ長を固定するためだけに無名の最大値を含める場合がある
       enum { foo(1), bar(2), baz(3), (65000) } TypeName;
     つまり上記の型は8bitではなく16bit長となる
 - 固定長配列型: uint8 uint40[5];
 - 可変長Vector型: uint16 IntVecType<40..800>;
   - 上記は16bit整数を要素とする40-800bytesのVector
   - 全長が40-800bytesであって要素数が40-800個なのではない
   - Vectorは可変長のためデータの前に長さをprependしてEncode
   - 長さField自身の長さは取り得る最大長によって決まる
   - つまり上記型のEncodeは<16bit len><40-800bytes data>となる
 - 複合型: structとselectがある
   - struct { Type1 t1; Type2 t2; } StructType;
   - select(FruitsType) {
       case apple: Red;
       case orange: Orange;
     } FruitsColor;
 - 暗号操作型: 決まった構造に展開されるマクロのようなもの
   - digitally-signed: デジタル署名
   - stream-ciphered: ストリーム暗号化
   - block-ciphered: ブロック暗号化
   - aead-ciphered: AEAD暗号化
   - public-key-encrypted: 公開鍵暗号化
   - 例: デジタル署名付きmessageの定義
     - digitally-signed struct {
         opaque message[message_len];
       } SignedMessage;


[Record Layer]
 - Type: レコード種別
   - 20: ChangeCipherSpec
   - 21: Alert
   - 22: Handshake
   - 23: ApplicationData
 - Major, Minor: SSLのバージョン番号
   - SSL2 => 2.0
   - SSL3 => 3.0
   - TLS1.0 => 3.1
   - TLS1.1 => 3.2
   - TLS1.2 => 3.3
 - Data: Typeによって様々なデータ
   - 交渉成立前は平文
   - 圧縮に合意していれば圧縮済みデータ
   - 暗号化に合意していれば暗号文とMAC
   - 暗号化データの形式はアルゴリズムの種別に依存する

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type      |     Major     |     Minor     |         Record
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 Length         |                     Data                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             Data                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             ....                              |


[SSL2]
[Diff between SSL3 and TLS]


