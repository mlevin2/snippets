TCP Related Documents Cheet Sheet

[フォーマット]
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Source Port          |       Destination Port        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Sequence Number                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Acknowledgment Number                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Data |           |U|A|P|R|S|F|                               |
| Offset| Reserved  |R|C|S|S|Y|I|            Window             |
|       |           |G|K|H|T|N|N|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Checksum            |         Urgent Pointer        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Options                    |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             data                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

[略語]
TCB    Transmission Control Block
RTT    Round Trip Time
SRTT   Smoothed RTT
RTO    Retransmission Timeout
SEQ    Sequence Number
ACK    Acknowledgement Number
UP     Urgent Pointer
WL     Last Window Update
MSS    Maximum Segment Size
SMSS   Sender MSS
RMSS   Receiver MSS
MTU    Maximum Transfer Unit
PMTUD  Path MTU Discovery
MSL    Maximum Segment Lifetime
ISN    Initial Sequence Number
ISS    Initial Send Sequence Number
IRS    Initial Receive Sequence Number
IW     Initial (Congestion) Window
RWND   Receive Window
CWND   Congestion Window
LFN    Long Fat Network
SWS    Silly Window Syndrome

[Maximum Segment Size]
 - RFC793
   - TCPオプション番号2で16bitのMSSをアナウンス可能
   - お互いSYNパケットにだけオプションを付ける
   - オプションが無ければセグメントサイズ無制限(仕様文面上は)
   - MSSオプションの値は送出I/FのMTU-40とするのが普通
   - MTUは通信メディアごとに大体決まっていてEthernetなら1500
   - つまりEthernet環境ではMSS=1500-40=1460となることが多い
 - RFC879
   - 当時「通信相手の環境について特段の知識が無い限りIPデータグラムは
     576bytes以内にすべし」という不文律があった
   - 576という数字の根拠は定かではないが、MLアーカイブなどからの断片
     情報によると、BBNで使われていたルータのIPデータグラム1つ分の内部
     バッファが576bytesの固定サイズだったことに由来しているらしい
   - TCP/IP headerを各々20bytesとしてTCP Payloadは536bytes以内
   - これがMSSオプション不在時の最大セグメントのデファクトとなった
   - 現実の実装では更に余裕を見てキリの良い512が採用されている
   - MSSオプションは自分の通信環境の知識を「アナウンス」する仕組み
   - 断じて「ネゴシエーション」の仕組みではない

[Initial Sequence Number]
 - RFC793
   - ISNの選択は単にランダムなだけではダメと明記
   - その目的は「直前のTCPの残骸と混ざらないようにする」こと
   - 4us毎にカウントアップする32bitクロックからISNを決定
   - 4.55時間で32bitを1周するので大丈夫だというのが当時の議論
   - この32bitクロックは容易に推測可能でセキュリティ上問題あり
 - RFC1323
   - TCP開始前に2*MSL以上待てばISN選択はどうでもいいとの指摘
 - RFC1948
   - 32bitクロック推測によるセキュリティ問題の軽減案
   - ISN = M + F(localip, localport, remoteip, remoteport)
   - MはRFC793のアルゴリズムと同じ32bitクロック
   - Fはハッシュ関数と秘密鍵による外部から推測不可能な要約関数
   - 何らかの契機で秘密鍵を更新する仕組みがあれば尚良い
   - MITM可能な攻撃者には無効な仕組みであることに注意
 - draft-ietf-tcpm-rfc1948bis
   - 上記RFCをInformationalからStandards Trackに昇格議論中

[Initial Congestion Window]
 - RFC793
   - 特段の規定無し
   - 初期の実装はRWND一杯まで使い切るものが多かった
 - RFC2001
   - 初めてIWは1*MSSと明記される
 - RFC2414
   - IW = min(4*MSS, max(2*MSS, 4380 bytes)) の式が初出
   - 4380は3*1460すなわち3*MSSのこと
   - 次のように言い換えられる
            MSS < 1095  IW = 4*MSS
     1095 < MSS < 2190  IW = 3*MSS
     2190 < MSS         IW = 2*MSS
 - draft-ietf-tcpm-initcwnd
   - IWを10*MSSにする提案が議論中

[Nagle Algorithm]
 - RFC896
   - 輻輳問題の多数の軽減策のうちのひとつ
   - ARPANETのIMP技術では輻輳問題は起こらなかった
   - ARPANETでは概してどのネットワークも帯域が一定で、IMPのキャパシ
     ティは過剰であり、スロットリング機能も備えていたため
   - 多様な帯域幅の外部NWと相互接続が始まると輻輳問題が顕著になった
   - 輻輳の原因のひとつに小さなパケットがある
   - Nagleが提案した適応的解決策は以下の通り
     - ACK待ちSEGが残っている間は次のSEGを送らない
     - ただし一度のflush機会に数SEGを同時送信するのはOK
     - RWNDが最大になるのを待って一気にデータ送信する戦略と言える
   - 対向ホストがDelayed ACKを採用した時の相性が悪い
   - かつて(1960年代)はタイマーによる解決策が採用されていた
     - 小さなSEGは200-500ms程度待ってから送るルール
     - ヤマが当たれば追加送信要求が来て1パケットにまとめられる
     - 例外として改行が含まれていれば即時送信する
     - この解決策はユーザーのinteractivityを犠牲にしている

[Delayed ACK]
 - RFC793
   - ACK送信は遅延すべきでないとの指摘
   - さもなければ無用な再送が発生するため
   - 輻輳に対する配慮として、小さなSEGに対してはRWNDを更新せずにACKを
     送り、その後バッファが十分大きくなった時点でACK+新RWNDを返すとい
     う戦略は許容するとの記述
 - RFC813
   - RFC793にはcorrectnessばかりでperformanceの規定が無いとの指摘
   - correctnessだけに配慮した実装による通信性能悪化をSWSと呼ぶ
   - SWSの解決策を2つ提示
   - 1つ目はRFC793にもあるRX側での小さなSEGに対するRWND更新の延期
     - この場合RWND更新頻度は減るがACKそのものは減らない
     - TX側の別解としてCWNDが一定割合以下ならSEGを送らない方式も
     - このTX側別解はNagle Algorithmと似ている
   - 2つ目の解がDelayed ACK
     - 以下の条件を満たせばすぐ次のSEGが来ると予想してACKを延期
       - PUSHフラグがセットされていない
       - すぐにでも通知すべきRWND更新情報が無い
     - この場合ACK個数とRWND更新頻度の両方が減る
     - 延期後アテが外れて次SEGが来なければ適切なタイマーでACKを返す
     - 当時の妥当なタイマーとして200-300msを推奨
     - しかし適応的なタイマー秒数選択が望ましいとの記述もあり
   - これらのアルゴリズムには2つの側面があることに注意
     - SEGサイズの細切れ化を防ぐことで輻輳を軽減する
     - 処理SEG数の減少によって両端のCPU使用率を削減する
 - RFC1122
   - ACK遅延秒数は最大0.5sまでにすべき
   - MSS一杯のストリーミングでは2SEGごとに最低1ACKを返すべき
   - Telnetなどの端末セッションでは、ACK遅延の挿入によって1SEGの中に
     ACK/RWND更新/文字Echoが相乗り可能になるとの実例を指摘
   - ACK遅延によってTX側のRTT評価が不正確になるとの指摘

[PUSH Flag]
[Selective ACK]

[Zero Window Probing]
 - RFC793
   - RWND=0となった後にそこからの脱出を検知する仕組み
   - TXはRWND=0の時でも1byteの再送を繰り返す
   - RXはその1byteのSEGを受信出来ようと出来まいとACKする義務がある
   - この規則によりRX側でRWNDが回復したらTX側にも確実に伝わる
 - RFC1122
   - RFC793の明確化
   - TXはRWND=0になってからRTO経過後にZWPを開始する
   - その後のZWPインターバルは徐々に拡大するのが良い
 - draft-ietf-tcpm-persist
   - RFC1122に厳密に従うとDoS脆弱性となることを指摘
   - ZWPの規則よりローカルのリソース管理ポリシーが優越する
   - アプリケーションからZWP優越を明示された場合はその限りでない

[Keep Alive]
 - RFC793
   - Keep-Aliveについての言及は無い
 - RFC1122
   - 通信の途絶えたTCPでTXが定期的に生存確認をする仕組み
   - そうしなければリソースを占有し続けるTCPの回収が目的
   - TXが送信するSEGの中身は空データ推奨
   - 実装としては直前の1byteを含むSEGを送る場合もあった
   - RXが生きていればACKが返る
   - RXが死んでいればRSTが返る
   - 仕様と関係なく実装が普及してしまったことの言及
   - Keep-Aliveのデフォルトインターバルは2時間
   - Keep-AliveはOn-Off可能でデフォルトはOffとすること
   - 短所として帯域の浪費と無駄なTCP切断の可能性を指摘

[Slow Start]
[Congestion Avoidance]
[Fast Retransmit]
[Fast Recovery]
[Urgent Pointer]
